# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# aliases
alias ls='ls -FG'
alias cddev='cd ~/Development'

# My Exports
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Development/python/
   
# Set my history size
HISTSIZE=10000
HISTFILESIZE=1000

function sshaws () {
  if [ "$#" -ne 2 ]; then
    echo "Not enough arguments"
    return 1
  fi
  
  USERNAME="ec2-user"
  
  i_id=$1
  if [ ${i_id:0:2} != "i-" ]; then
    i_id="i-$i_id"
  fi
  
  #running=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 | grep -c '"Name": "running"')
  #ip=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 --output json | egrep -o '"PrivateIpAddress": "([0-9]{1,3}[\.]){3}[0-9]{1,3}"' |uniq| awk -F\" '{print $(NF-1)}')
  #key=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 --output json | egrep -o '"KeyName": ".*?"' | awk -F\" '{print $(NF-1)}')
  
  output=$(aws ec2 describe-instances --instance-ids $i_id --profile $2 --query 'Reservations[0].Instances[0].{RUNNING:State.Name,IPADDR:PrivateIpAddress,KEY:KeyName}' --output json)

  running=$(echo $output |grep -c running)
  ip=$(echo $output | awk '{print $5}' | sed -e "s/\"//g" -e "s/,//g")
  key=$(echo $output | awk '{print $7}' | sed -e "s/\"//g" -e "s/,//g")
  
  if [ ! $running -gt 0 ]; then
    echo "Host $1 not available"
  elif [ -z "$ip" ]; then
    echo "No Ip address could be found"
  elif [ ! -e ~/.ssh/"$key"* ]; then
    echo "SSH key %key could not be found in ~/.ssh/"
  else
    ssh -i ~/.ssh/"$key"*  $USERNAME@$ip
  fi
}

function git_branch {
   branch=$(git branch  2> /dev/null | grep \* | awk '{print $NF}')

   if [[ $branch != "" ]]; then
     echo "[$branch]"
   fi
}

export PS1=`echo '\033[0;31;1m[\u@\h] \033[0;36;1m[\T] \033[0;32;1m $PWD \033[0;0m''$(git_branch)'" \n$ "`

if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
fi
if [ -f /usr/local/bin/virtualenvwrapper.sh  ]; then
   source /usr/local/bin/virtualenvwrapper.sh
fi

if [ "$(uname)" = "SunOS" ]; then
  PATH=${PATH}:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb/:/usr/local/samba/bin
  MANPATH=/usr/share/man:/usr/sfw/man
  export TERM=xtermc
fi

# Set autocomplete for aws CLI
complete  -C aws_completer aws

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

