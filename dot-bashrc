# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# aliases
alias ls='ls -FG'
alias cddev='cd ~/Development'

# My Exports
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Development/python/
export ALTERNATE_EDITOR=vim EDITOR=vim VISUAL=vim

# Set my history size
HISTSIZE=10000
HISTFILESIZE=1000

if [ -f $HOME/.http_proxy ];then
       source $HOME/.http_proxy
fi
function rdpaws {
  scheme='PublicIpAddress'
  i_id=$1

  if [ "$#" -le 2 ]; then
    echo "Not enough arguments, (instanceid, profile, [public|private])"
    return 1
  fi

  if [ $3 == 'private' ]; then
    scheme='PrivateIpAddress'
  fi

  if [ ${i_id:0:2} != "i-" ]; then
    i_id="i-$i_id"
  fi

  if [ "$(uname -s)" = "Darwin" ]; then
    if [ ! -f /Applications/Microsoft\ Remote\ Desktop.app/Contents/MacOS/Microsoft\ Remote\ Desktop ]; then
      echo "RDP client not installed"
      return 1
    fi
    output=$(aws ec2 describe-instances --profile $2 --instance-ids $i_id --query "Reservations[0].Instances[0].{RUNNING:State.Name,IPADDR:$scheme}" --output json)
    ip=$(echo $output | awk '{print $5}' | sed -e "s/\"//g" -e "s/,//g")
    running=$(echo $output |grep -c running)

    if [ ! -f /tmp/$ip.rdp ]; then
      echo -e "full address:s:$ip\n username:s:Administrator" > /tmp/${ip}.rdp
    fi

    if [ $running -gt 0 ]; then
      /usr/bin/open /tmp/$ip.rdp
    else
      echo "Host $i_id unavailable"
      return 1
    fi
  fi
}

function sshaws () {
  if [ "$#" -ne 2 ]; then
    echo "Not enough arguments"
    return 1
  fi
  
  USERNAME="ec2-user"
  
  i_id=$1
  if [ ${i_id:0:2} != "i-" ]; then
    i_id="i-$i_id"
  fi
  
  #running=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 | grep -c '"Name": "running"')
  #ip=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 --output json | egrep -o '"PrivateIpAddress": "([0-9]{1,3}[\.]){3}[0-9]{1,3}"' |uniq| awk -F\" '{print $(NF-1)}')
  #key=$(aws ec2 describe-instances --instance-ids  $i_id --profile $2 --output json | egrep -o '"KeyName": ".*?"' | awk -F\" '{print $(NF-1)}')
  
  output=$(aws ec2 describe-instances --instance-ids $i_id --profile $2 --query 'Reservations[0].Instances[0].{RUNNING:State.Name,IPADDR:PrivateIpAddress,KEY:KeyName}' --output json)

  running=$(echo $output |grep -c running)
  ip=$(echo $output | awk '{print $5}' | sed -e "s/\"//g" -e "s/,//g")
  key=$(echo $output | awk '{print $7}' | sed -e "s/\"//g" -e "s/,//g")
  
  if [ ! $running -gt 0 ]; then
    echo "Host $1 not available"
  elif [ -z "$ip" ]; then
    echo "No Ip address could be found"
  elif [ ! -e ~/.ssh/"$key"* ]; then
    echo "SSH key %key could not be found in ~/.ssh/"
  else
    ssh -i ~/.ssh/"$key"*  $USERNAME@$ip
  fi
}

function awslookup (){
  if [ "$#" -ne 2 ]; then
    echo "Not enough arguments, arguments $1 Tag name value, $2 profile name"
    return 1
  fi

  tag=*$1*
  aws ec2 describe-instances \
               --output table \
               --filters "Name=tag-key,Values=Name" "Name=tag-value,Values=$tag" "Name=instance-state-code,Values=16" \
               --query 'Reservations[].Instances[].[Tags[?Key==`Name`] | [0].Value, InstanceId]' \
               --profile $2
}

function git_branch {
   branch=$(git branch  2> /dev/null | grep \* | awk '{print $NF}')

   if [[ $branch != "" ]]; then
     echo "[$branch]"
   fi
}

export PS1=`echo '\033[0;31;1m[\u@\h] \033[0;36;1m[\T] \033[0;32;1m \w \033[0;0m''$(git_branch)'" \n$ "`

if [ -f ~/.git-completion.bash ]; then
        . ~/.git-completion.bash
fi
if [ -f /usr/local/bin/virtualenvwrapper.sh  ]; then
   source /usr/local/bin/virtualenvwrapper.sh
fi

if [ "$(uname)" = "SunOS" ]; then
  PATH=${PATH}:/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb/:/usr/local/samba/bin
  MANPATH=/usr/share/man:/usr/sfw/man
  export TERM=xtermc
fi

# Set autocomplete for aws CLI
complete  -C aws_completer aws

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Added bash auto-completion
# pip bash completion start
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

_ssh_completion()
{
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=$(grep '^Host' ~/.ssh/config | awk '{print $2}')
  COMPREPLY=( $(compgen -W "$opts" -- ${cur}) )
  return 0
}

_awslookup_completion()
{
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=$(cat ~/.aws/tags | tr -d '{}"'|awk -F':' '{print $1}')
  COMPREPLY=( $(compgen -W "$opts" -- ${cur}) )
  return 0
}

complete -F _awslookup_completion awslookup
complete -F _ssh_completion ssh

# For site specific bash configs
if [ -f ~/.bash_site_specific ]; then
   source  ~/.bash_site_specific
fi
